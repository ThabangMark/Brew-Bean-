// Shopping Cart System
class ShoppingCart {
  constructor() {
    this.items = JSON.parse(localStorage.getItem("cartItems")) || []
    this.init()
  }

  init() {
    this.updateCartDisplay()
    this.bindEvents()
  }

  bindEvents() {
    // Cart button
    document.getElementById("cartBtn").addEventListener("click", () => {
      this.showCart()
    })

    // Close cart modal
    document.getElementById("closeCartBtn").addEventListener("click", () => {
      this.hideCart()
    })

    // Clear cart
    document.getElementById("clearCartBtn").addEventListener("click", () => {
      this.clearCart()
    })

    // Checkout button
    document.getElementById("checkoutBtn").addEventListener("click", () => {
      this.startCheckout()
    })

    // Add to cart buttons
    document.addEventListener("click", (e) => {
      if (e.target.classList.contains("add-to-cart-btn")) {
        this.addToCart(e.target)
      }
    })

    // Quantity selectors in product cards
    document.addEventListener("click", (e) => {
      if (e.target.classList.contains("qty-btn")) {
        this.handleQuantityChange(e.target)
      }
    })

    // Close modal when clicking outside
    document.addEventListener("click", (e) => {
      if (e.target.classList.contains("modal")) {
        e.target.classList.remove("active")
      }
    })
  }

  addToCart(button) {
    const productCard = button.closest(".product-card")
    const qtyInput = productCard.querySelector(".qty-input")
    const quantity = Number.parseInt(qtyInput?.value || 1)

    const product = {
      id: button.dataset.id,
      name: button.dataset.name,
      price: Number.parseFloat(button.dataset.price),
      image: button.dataset.image || "default.jpg",
      quantity: quantity,
    }

    // Check if item already exists
    const existingItem = this.items.find((item) => item.id === product.id)

    if (existingItem) {
      existingItem.quantity += quantity
    } else {
      this.items.push(product)
    }

    this.saveCart()
    this.updateCartDisplay()
    this.showAddedNotification(product.name, quantity)

    // Reset quantity selector
    if (qtyInput) qtyInput.value = 1
  }

  removeFromCart(productId) {
    this.items = this.items.filter((item) => item.id !== productId)
    this.saveCart()
    this.updateCartDisplay()
    this.renderCartItems()
  }

  updateQuantity(productId, newQuantity) {
    const item = this.items.find((item) => item.id === productId)
    if (item) {
      if (newQuantity <= 0) {
        this.removeFromCart(productId)
      } else {
        item.quantity = newQuantity
        this.saveCart()
        this.updateCartDisplay()
        this.renderCartItems()
      }
    }
  }

  clearCart() {
    if (confirm("Are you sure you want to clear your cart?")) {
      this.items = []
      this.saveCart()
      this.updateCartDisplay()
      this.renderCartItems()
    }
  }

  getCartTotal() {
    return this.items.reduce((total, item) => total + item.price * item.quantity, 0)
  }

  getCartCount() {
    return this.items.reduce((count, item) => count + item.quantity, 0)
  }

  updateCartDisplay() {
    const cartCount = document.getElementById("cartCount")
    if (cartCount) {
      cartCount.textContent = this.getCartCount()
    }

    const cartTotal = document.getElementById("cartTotal")
    if (cartTotal) {
      cartTotal.textContent = this.getCartTotal().toFixed(2)
    }
  }

  showCart() {
    this.renderCartItems()
    document.getElementById("cartModal").classList.add("active")
  }

  hideCart() {
    document.getElementById("cartModal").classList.remove("active")
  }

  renderCartItems() {
    const cartItemsContainer = document.getElementById("cartItems")

    if (this.items.length === 0) {
      cartItemsContainer.innerHTML = `
                <div class="empty-cart">
                    <div class="empty-cart-icon">ðŸ›’</div>
                    <p>Your cart is empty</p>
                    <button class="btn btn-primary" onclick="cart.hideCart(); showPage('products')">
                        Start Shopping
                    </button>
                </div>
            `
      document.getElementById("checkoutBtn").disabled = true
      return
    }

    document.getElementById("checkoutBtn").disabled = false

    cartItemsContainer.innerHTML = this.items
      .map(
        (item) => `
            <div class="cart-item">
                <div class="cart-item-image">â˜•</div>
                <div class="cart-item-details">
                    <div class="cart-item-name">${item.name}</div>
                    <div class="cart-item-price">P ${item.price.toFixed(2)} each</div>
                </div>
                <div class="cart-item-controls">
                    <button class="cart-qty-btn" onclick="cart.updateQuantity('${item.id}', ${item.quantity - 1})">-</button>
                    <input type="number" class="cart-qty-input" value="${item.quantity}" 
                           onchange="cart.updateQuantity('${item.id}', parseInt(this.value))" min="1">
                    <button class="cart-qty-btn" onclick="cart.updateQuantity('${item.id}', ${item.quantity + 1})">+</button>
                    <button class="remove-item-btn" onclick="cart.removeFromCart('${item.id}')">Remove</button>
                </div>
            </div>
        `,
      )
      .join("")

    this.updateCartDisplay()
  }

  handleQuantityChange(button) {
    const productCard = button.closest(".product-card")
    const qtyInput = productCard.querySelector(".qty-input")
    const currentValue = Number.parseInt(qtyInput.value)

    if (button.dataset.action === "increase") {
      qtyInput.value = Math.min(currentValue + 1, 10)
    } else if (button.dataset.action === "decrease") {
      qtyInput.value = Math.max(currentValue - 1, 1)
    }
  }

  startCheckout() {
    if (this.items.length === 0) return

    this.hideCart()
    checkout.start()
  }

  saveCart() {
    localStorage.setItem("cartItems", JSON.stringify(this.items))
  }

  showAddedNotification(productName, quantity) {
    Notification(`${quantity}x ${productName} added to cart!`)
  }
}

// Checkout System
class CheckoutSystem {
  constructor() {
    this.currentStep = 1
    this.orderData = {}
    this.init()
  }

  init() {
    this.bindEvents()
  }

  bindEvents() {
    // Close checkout modal
    document.getElementById("closeCheckoutBtn").addEventListener("click", () => {
      this.hideCheckout()
    })

    // Step navigation
    document.getElementById("nextToPayment").addEventListener("click", () => {
      this.validateShipping() && this.goToStep(2)
    })

    document.getElementById("backToShipping").addEventListener("click", () => {
      this.goToStep(1)
    })

    document.getElementById("placeOrder").addEventListener("click", () => {
      this.placeOrder()
    })

    // Payment method selection
    document.querySelectorAll('input[name="paymentMethod"]').forEach((radio) => {
      radio.addEventListener("change", () => {
        this.showPaymentForm(radio.value)
      })
    })

    // Card number formatting
    document.getElementById("cardNumber").addEventListener("input", (e) => {
      this.formatCardNumber(e.target)
    })

    // Expiry date formatting
    document.getElementById("expiryDate").addEventListener("input", (e) => {
      this.formatExpiryDate(e.target)
    })

    // Continue shopping
    document.getElementById("continueShopping").addEventListener("click", () => {
      this.hideCheckout()
      showPage("products")
    })

    // Track order (placeholder)
    document.getElementById("trackOrder").addEventListener("click", () => {
      alert("Order tracking feature coming soon!")
    })
  }

  start() {
    this.currentStep = 1
    this.goToStep(1)
    this.renderCheckoutItems()
    this.calculateTotals()
    document.getElementById("checkoutModal").classList.add("active")
  }

  hideCheckout() {
    document.getElementById("checkoutModal").classList.remove("active")
  }

  goToStep(step) {
    // Hide all steps
    document.querySelectorAll(".checkout-step").forEach((stepEl) => {
      stepEl.classList.remove("active")
    })

    // Show target step
    document.getElementById(`step${step}`).classList.add("active")

    // Update step indicators
    document.querySelectorAll(".step").forEach((stepEl, index) => {
      stepEl.classList.remove("active", "completed")
      if (index + 1 === step) {
        stepEl.classList.add("active")
      } else if (index + 1 < step) {
        stepEl.classList.add("completed")
      }
    })

    this.currentStep = step
  }

  validateShipping() {
    const form = document.getElementById("shippingForm")
    const formData = new FormData(form)
    const data = Object.fromEntries(formData)

    // Basic validation
    const requiredFields = ["firstName", "lastName", "email", "phone", "address", "city"]
    for (const field of requiredFields) {
      if (!data[field]) {
        alert(`Please fill in the ${field.replace(/([A-Z])/g, " $1").toLowerCase()}`)
        return false
      }
    }

    // Email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(data.email)) {
      alert("Please enter a valid email address")
      return false
    }

    // Phone validation
    const phoneRegex = /^\+267\s?\d{2}\s?\d{3}\s?\d{3}$/
    if (!phoneRegex.test(data.phone)) {
      alert("Please enter a valid Botswana phone number (+267 XX XXX XXX)")
      return false
    }

    this.orderData.shipping = data
    return true
  }

  validatePayment() {
    const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value
    this.orderData.paymentMethod = paymentMethod

    if (paymentMethod === "card") {
      const cardNumber = document.getElementById("cardNumber").value.replace(/\s/g, "")
      const expiryDate = document.getElementById("expiryDate").value
      const cvv = document.getElementById("cvv").value
      const cardName = document.getElementById("cardName").value

      if (!cardNumber || cardNumber.length < 16) {
        alert("Please enter a valid card number")
        return false
      }

      if (!expiryDate || !expiryDate.match(/^\d{2}\/\d{2}$/)) {
        alert("Please enter a valid expiry date (MM/YY)")
        return false
      }

      if (!cvv || cvv.length < 3) {
        alert("Please enter a valid CVV")
        return false
      }

      if (!cardName) {
        alert("Please enter the name on the card")
        return false
      }

      this.orderData.payment = {
        cardNumber: cardNumber.slice(-4), // Store only last 4 digits
        cardName,
        expiryDate,
      }
    } else if (paymentMethod === "mobile") {
      const mobileNumber = document.getElementById("mobileNumber").value
      const provider = document.getElementById("mobileProvider").value

      if (!mobileNumber || !provider) {
        alert("Please fill in all mobile payment details")
        return false
      }

      this.orderData.payment = { mobileNumber, provider }
    }

    return true
  }

  showPaymentForm(method) {
    // Hide all payment forms
    document.querySelectorAll(".payment-form").forEach((form) => {
      form.style.display = "none"
    })

    // Show selected payment form
    document.getElementById(`${method}PaymentForm`).style.display = "block"
  }

  renderCheckoutItems() {
    const container = document.getElementById("checkoutItems")
    container.innerHTML = cart.items
      .map(
        (item) => `
            <div class="checkout-item">
                <span>${item.name} x ${item.quantity}</span>
                <span>P ${(item.price * item.quantity).toFixed(2)}</span>
            </div>
        `,
      )
      .join("")
  }

  calculateTotals() {
    const subtotal = cart.getCartTotal()
    const deliveryFee = subtotal >= 300 ? 0 : 25
    const total = subtotal + deliveryFee

    document.getElementById("checkoutSubtotal").textContent = subtotal.toFixed(2)
    document.getElementById("deliveryFee").textContent = deliveryFee.toFixed(2)
    document.getElementById("checkoutTotal").textContent = total.toFixed(2)

    this.orderData.subtotal = subtotal
    this.orderData.deliveryFee = deliveryFee
    this.orderData.total = total
  }

  async placeOrder() {
    if (!this.validatePayment()) return

    const placeOrderBtn = document.getElementById("placeOrder")
    placeOrderBtn.textContent = "Processing..."
    placeOrderBtn.disabled = true

    try {
      // Simulate order processing
      await new Promise((resolve) => setTimeout(resolve, 2000))

      // Generate order number
      const orderNumber = "KC" + Date.now().toString().slice(-6)

      // Calculate delivery date
      const deliveryDate = new Date()
      deliveryDate.setDate(deliveryDate.getDate() + 3)

      this.orderData.orderNumber = orderNumber
      this.orderData.items = [...cart.items]
      this.orderData.orderDate = new Date().toISOString()

      // Update confirmation page
      document.getElementById("orderNumber").textContent = orderNumber
      document.getElementById("estimatedDelivery").textContent = deliveryDate.toLocaleDateString()
      document.getElementById("finalTotal").textContent = this.orderData.total.toFixed(2)

      // Clear cart
      cart.items = []
      cart.saveCart()
      cart.updateCartDisplay()

      // Go to confirmation step
      this.goToStep(3)

      // Send confirmation email (simulation)
      this.sendConfirmationEmail()
    } catch (error) {
      alert("There was an error processing your order. Please try again.")
    } finally {
      placeOrderBtn.textContent = "Place Order"
      placeOrderBtn.disabled = false
    }
  }

  sendConfirmationEmail() {
    // Simulate sending confirmation email
    console.log("Sending confirmation email to:", this.orderData.shipping.email)
    console.log("Order details:", this.orderData)
  }

  formatCardNumber(input) {
    const value = input.value.replace(/\s/g, "").replace(/[^0-9]/gi, "")
    const formattedValue = value.match(/.{1,4}/g)?.join(" ") || value
    input.value = formattedValue
  }

  formatExpiryDate(input) {
    let value = input.value.replace(/\D/g, "")
    if (value.length >= 2) {
      value = value.substring(0, 2) + "/" + value.substring(2, 4)
    }
    input.value = value
  }
}

// Initialize cart and checkout systems
const cart = new ShoppingCart()
const checkout = new CheckoutSystem()

// Update existing add to cart functionality
document.addEventListener("click", (e) => {
  if (e.target.textContent === "Add to Cart" && !e.target.classList.contains("add-to-cart-btn")) {
    e.preventDefault()

    // For products without proper data attributes, create them
    const productCard = e.target.closest(".product-card")
    if (productCard) {
      const productName = productCard.querySelector("h3").textContent
      const priceText = productCard.querySelector(".price").textContent
      const price = Number.parseFloat(priceText.replace("P ", ""))

      // Create a temporary button with proper attributes
      const tempBtn = document.createElement("button")
      tempBtn.dataset.id = productName.toLowerCase().replace(/\s+/g, "-")
      tempBtn.dataset.name = productName
      tempBtn.dataset.price = price
      tempBtn.dataset.image = "coffee.jpg"

      cart.addToCart(tempBtn)
    }
  }
})

// Declare showNotification and showPage functions
function Notification(message) {
  alert(message)
}

function showPage(pageName) {
  console.log(`Showing page: ${pageName}`)
}
