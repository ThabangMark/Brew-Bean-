// DOM Content Loaded
document.addEventListener("DOMContentLoaded", () => {
  // Initialize all functionality
  initNavigation()
  initScrollEffects()
  initFormHandling()
  initGallery()
  initAnimations()
})

// Navigation functionality
function initNavigation() {
  const hamburger = document.getElementById("hamburger")
  const navMenu = document.getElementById("nav-menu")
  const navLinks = document.querySelectorAll(".nav-link")
  const navbar = document.getElementById("navbar")

  // Mobile menu toggle
  hamburger.addEventListener("click", () => {
    hamburger.classList.toggle("active")
    navMenu.classList.toggle("active")
  })

  // Close mobile menu when clicking on a link
  navLinks.forEach((link) => {
    link.addEventListener("click", () => {
      hamburger.classList.remove("active")
      navMenu.classList.remove("active")
    })
  })

  // Smooth scrolling for navigation links
  navLinks.forEach((link) => {
    link.addEventListener("click", function (e) {
      e.preventDefault()
      const targetId = this.getAttribute("href")
      const targetSection = document.querySelector(targetId)

      if (targetSection) {
        const offsetTop = targetSection.offsetTop - 70 // Account for fixed navbar
        window.scrollTo({
          top: offsetTop,
          behavior: "smooth",
        })
      }
    })
  })

  // Navbar scroll effect
  window.addEventListener("scroll", () => {
    if (window.scrollY > 50) {
      navbar.classList.add("scrolled")
    } else {
      navbar.classList.remove("scrolled")
    }
  })

  // Active navigation link highlighting
  window.addEventListener("scroll", () => {
    let current = ""
    const sections = document.querySelectorAll("section")

    sections.forEach((section) => {
      const sectionTop = section.offsetTop - 100
      const sectionHeight = section.clientHeight

      if (window.scrollY >= sectionTop && window.scrollY < sectionTop + sectionHeight) {
        current = section.getAttribute("id")
      }
    })

    navLinks.forEach((link) => {
      link.classList.remove("active")
      if (link.getAttribute("href") === `#${current}`) {
        link.classList.add("active")
      }
    })
  })
}

// Scroll effects and animations
function initScrollEffects() {
  // Intersection Observer for fade-in animations
  const observerOptions = {
    threshold: 0.1,
    rootMargin: "0px 0px -50px 0px",
  }

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.style.opacity = "1"
        entry.target.style.transform = "translateY(0)"
      }
    })
  }, observerOptions)

  // Observe elements for animation
  const animatedElements = document.querySelectorAll(".coffee-card, .menu-category, .gallery-item, .contact-item")
  animatedElements.forEach((el) => {
    el.style.opacity = "0"
    el.style.transform = "translateY(30px)"
    el.style.transition = "opacity 0.6s ease, transform 0.6s ease"
    observer.observe(el)
  })

  // Parallax effect for hero section
  window.addEventListener("scroll", () => {
    const scrolled = window.pageYOffset
    const heroImage = document.querySelector(".hero-image")

    if (heroImage && scrolled < window.innerHeight) {
      heroImage.style.transform = `translateY(${scrolled * 0.3}px)`
    }
  })
}

// Form handling
function initFormHandling() {
  // Contact form submission
  const contactForm = document.getElementById("contact-form")
  if (contactForm) {
    contactForm.addEventListener("submit", function (e) {
      e.preventDefault()

      // Get form data
      const formData = new FormData(this)
      const data = Object.fromEntries(formData)

      // Simulate form submission
      showNotification("Thank you for your message! We'll get back to you soon.", "success")

      // Reset form
      this.reset()

      // In a real application, you would send the data to a server
      console.log("Form submitted:", data)
    })
  }

  // Newsletter form submission
  const newsletterForm = document.querySelector(".newsletter-form")
  if (newsletterForm) {
    newsletterForm.addEventListener("submit", function (e) {
      e.preventDefault()

      const email = this.querySelector('input[type="email"]').value

      if (validateEmail(email)) {
        showNotification("Successfully subscribed to our newsletter!", "success")
        this.reset()
      } else {
        showNotification("Please enter a valid email address.", "error")
      }
    })
  }
}

// Gallery functionality
function initGallery() {
  const galleryItems = document.querySelectorAll(".gallery-item")

  galleryItems.forEach((item) => {
    item.addEventListener("click", function () {
      const img = this.querySelector("img")
      const title = this.querySelector("h4").textContent

      // Create modal for full-size image view
      createImageModal(img.src, title)
    })
  })
}

// Animation utilities
function initAnimations() {
  // Counter animation for stats
  const stats = document.querySelectorAll(".stat h4")
  const statsObserver = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        animateCounter(entry.target)
        statsObserver.unobserve(entry.target)
      }
    })
  })

  stats.forEach((stat) => {
    statsObserver.observe(stat)
  })
}

// Utility functions
function scrollToSection(sectionId) {
  const section = document.getElementById(sectionId)
  if (section) {
    const offsetTop = section.offsetTop - 70
    window.scrollTo({
      top: offsetTop,
      behavior: "smooth",
    })
  }
}

function validateEmail(email) {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
  return emailRegex.test(email)
}

function showNotification(message, type = "info") {
  // Create notification element
  const notification = document.createElement("div")
  notification.className = `notification notification-${type}`
  notification.textContent = message

  // Style the notification
  Object.assign(notification.style, {
    position: "fixed",
    top: "20px",
    right: "20px",
    padding: "15px 20px",
    borderRadius: "8px",
    color: "white",
    fontWeight: "600",
    zIndex: "10000",
    transform: "translateX(100%)",
    transition: "transform 0.3s ease",
    maxWidth: "300px",
    wordWrap: "break-word",
  })

  // Set background color based on type
  switch (type) {
    case "success":
      notification.style.backgroundColor = "#4CAF50"
      break
    case "error":
      notification.style.backgroundColor = "#f44336"
      break
    default:
      notification.style.backgroundColor = "#2196F3"
  }

  // Add to DOM
  document.body.appendChild(notification)

  // Animate in
  setTimeout(() => {
    notification.style.transform = "translateX(0)"
  }, 100)

  // Remove after 5 seconds
  setTimeout(() => {
    notification.style.transform = "translateX(100%)"
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification)
      }
    }, 300)
  }, 5000)
}

function createImageModal(src, title) {
  // Create modal overlay
  const modal = document.createElement("div")
  modal.className = "image-modal"

  Object.assign(modal.style, {
    position: "fixed",
    top: "0",
    left: "0",
    width: "100%",
    height: "100%",
    backgroundColor: "rgba(0, 0, 0, 0.9)",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    zIndex: "10000",
    cursor: "pointer",
  })

  // Create image container
  const imageContainer = document.createElement("div")
  Object.assign(imageContainer.style, {
    maxWidth: "90%",
    maxHeight: "90%",
    textAlign: "center",
  })

  // Create image
  const img = document.createElement("img")
  img.src = src
  img.alt = title
  Object.assign(img.style, {
    maxWidth: "100%",
    maxHeight: "100%",
    borderRadius: "10px",
  })

  // Create title
  const titleElement = document.createElement("h3")
  titleElement.textContent = title
  Object.assign(titleElement.style, {
    color: "white",
    marginTop: "20px",
    fontFamily: "Playfair Display, serif",
  })

  // Assemble modal
  imageContainer.appendChild(img)
  imageContainer.appendChild(titleElement)
  modal.appendChild(imageContainer)

  // Add close functionality
  modal.addEventListener("click", () => {
    document.body.removeChild(modal)
  })

  // Add to DOM
  document.body.appendChild(modal)
}

function animateCounter(element) {
  const target = Number.parseInt(element.textContent.replace(/\D/g, ""))
  const suffix = element.textContent.replace(/\d/g, "")
  let current = 0
  const increment = target / 50
  const timer = setInterval(() => {
    current += increment
    if (current >= target) {
      element.textContent = target + suffix
      clearInterval(timer)
    } else {
      element.textContent = Math.floor(current) + suffix
    }
  }, 40)
}

// Keyboard navigation support
document.addEventListener("keydown", (e) => {
  // Close modal with Escape key
  if (e.key === "Escape") {
    const modal = document.querySelector(".image-modal")
    if (modal) {
      document.body.removeChild(modal)
    }
  }
})

// Performance optimization: Lazy loading for images
function initLazyLoading() {
  if ("IntersectionObserver" in window) {
    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const img = entry.target
          img.src = img.dataset.src
          img.classList.remove("lazy")
          imageObserver.unobserve(img)
        }
      })
    })

    const lazyImages = document.querySelectorAll("img[data-src]")
    lazyImages.forEach((img) => imageObserver.observe(img))
  }
}

// Initialize lazy loading
initLazyLoading()

// Service Worker registration for PWA capabilities (optional)
if ("serviceWorker" in navigator) {
  window.addEventListener("load", () => {
    navigator.serviceWorker
      .register("/sw.js")
      .then((registration) => {
        console.log("ServiceWorker registration successful")
      })
      .catch((err) => {
        console.log("ServiceWorker registration failed")
      })
  })
}

// Error handling for images
document.addEventListener(
  "error",
  (e) => {
    if (e.target.tagName === "IMG") {
      e.target.src = "/placeholder.svg?height=400&width=400&text=Image+Not+Found"
    }
  },
  true,
)

// Accessibility improvements
function initAccessibility() {
  // Skip to main content link
  const skipLink = document.createElement("a")
  skipLink.href = "#home"
  skipLink.textContent = "Skip to main content"
  skipLink.className = "skip-link"

  Object.assign(skipLink.style, {
    position: "absolute",
    top: "-40px",
    left: "6px",
    background: "#8B4513",
    color: "white",
    padding: "8px",
    textDecoration: "none",
    borderRadius: "4px",
    zIndex: "10001",
  })

  skipLink.addEventListener("focus", function () {
    this.style.top = "6px"
  })

  skipLink.addEventListener("blur", function () {
    this.style.top = "-40px"
  })

  document.body.insertBefore(skipLink, document.body.firstChild)

  // Announce page changes for screen readers
  const announcer = document.createElement("div")
  announcer.setAttribute("aria-live", "polite")
  announcer.setAttribute("aria-atomic", "true")
  announcer.className = "sr-only"
  Object.assign(announcer.style, {
    position: "absolute",
    left: "-10000px",
    width: "1px",
    height: "1px",
    overflow: "hidden",
  })
  document.body.appendChild(announcer)

  // Announce section changes
  const navLinks = document.querySelectorAll(".nav-link")
  navLinks.forEach((link) => {
    link.addEventListener("click", function () {
      const targetId = this.getAttribute("href").substring(1)
      const targetSection = document.getElementById(targetId)
      if (targetSection) {
        const sectionTitle = targetSection.querySelector("h1, h2, h3")
        if (sectionTitle) {
          announcer.textContent = `Navigated to ${sectionTitle.textContent}`
        }
      }
    })
  })
}

// Initialize accessibility features
initAccessibility()
