"use client"

import Link from "next/link"
import { useState, useEffect } from "react"

interface CartItem {
  id: string
  name: string
  price: number
  quantity: number
  category: string
}

export default function MenuPage() {
  const [cart, setCart] = useState<CartItem[]>([])
  const [isCartOpen, setIsCartOpen] = useState(false)

  // Load cart from localStorage on component mount
  useEffect(() => {
    const savedCart = localStorage.getItem("brewbean-cart")
    if (savedCart) {
      setCart(JSON.parse(savedCart))
    }
  }, [])

  // Save cart to localStorage whenever cart changes
  useEffect(() => {
    localStorage.setItem("brewbean-cart", JSON.stringify(cart))
  }, [cart])

  const addToCart = (name: string, price: string, category: string) => {
    const numericPrice = Number.parseFloat(price.replace("$", ""))
    const itemId = `${name.toLowerCase().replace(/\s+/g, "-")}`

    setCart((prevCart) => {
      const existingItem = prevCart.find((item) => item.id === itemId)

      if (existingItem) {
        return prevCart.map((item) => (item.id === itemId ? { ...item, quantity: item.quantity + 1 } : item))
      } else {
        return [
          ...prevCart,
          {
            id: itemId,
            name,
            price: numericPrice,
            quantity: 1,
            category,
          },
        ]
      }
    })

    // Show success message
    const notification = document.createElement("div")
    notification.className =
      "fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 animate-bounce"
    notification.textContent = `${name} added to cart!`
    document.body.appendChild(notification)

    setTimeout(() => {
      notification.remove()
    }, 2000)
  }

  const removeFromCart = (itemId: string) => {
    setCart((prevCart) => prevCart.filter((item) => item.id !== itemId))
  }

  const updateQuantity = (itemId: string, newQuantity: number) => {
    if (newQuantity === 0) {
      removeFromCart(itemId)
    } else {
      setCart((prevCart) => prevCart.map((item) => (item.id === itemId ? { ...item, quantity: newQuantity } : item)))
    }
  }

  const getTotalItems = () => {
    return cart.reduce((total, item) => total + item.quantity, 0)
  }

  const getTotalPrice = () => {
    return cart.reduce((total, item) => total + item.price * item.quantity, 0)
  }

  const clearCart = () => {
    setCart([])
  }

  return (
    <div className="min-h-screen">
      {/* Navigation with Cart */}
      <nav className="fixed top-0 w-full bg-white/95 backdrop-blur-sm shadow-sm z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex-shrink-0">
              <Link href="/" className="text-2xl font-bold text-amber-800">
                Brew & Bean
              </Link>
            </div>
            <div className="hidden md:block">
              <div className="ml-10 flex items-baseline space-x-4">
                <Link
                  href="/"
                  className="text-gray-700 hover:text-amber-600 px-3 py-2 rounded-md text-sm font-medium transition-colors"
                >
                  Home
                </Link>
                <Link
                  href="/about"
                  className="text-gray-700 hover:text-amber-600 px-3 py-2 rounded-md text-sm font-medium transition-colors"
                >
                  About
                </Link>
                <Link
                  href="/products"
                  className="text-gray-700 hover:text-amber-600 px-3 py-2 rounded-md text-sm font-medium transition-colors"
                >
                  Products
                </Link>
                <Link
                  href="/menu"
                  className="text-gray-900 hover:text-amber-600 px-3 py-2 rounded-md text-sm font-medium transition-colors"
                >
                  Menu
                </Link>
                <Link
                  href="/services"
                  className="text-gray-700 hover:text-amber-600 px-3 py-2 rounded-md text-sm font-medium transition-colors"
                >
                  Services
                </Link>
                <Link
                  href="/blog"
                  className="text-gray-700 hover:text-amber-600 px-3 py-2 rounded-md text-sm font-medium transition-colors"
                >
                  Blog
                </Link>
                <Link
                  href="/contact"
                  className="text-gray-700 hover:text-amber-600 px-3 py-2 rounded-md text-sm font-medium transition-colors"
                >
                  Contact
                </Link>
              </div>
            </div>

            {/* Cart Icon */}
            <div className="relative">
              <button
                onClick={() => setIsCartOpen(!isCartOpen)}
                className="relative p-2 text-gray-700 hover:text-amber-600 transition-colors"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m0 0h8"
                  />
                </svg>
                {getTotalItems() > 0 && (
                  <span className="absolute -top-1 -right-1 bg-amber-600 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
                    {getTotalItems()}
                  </span>
                )}
              </button>

              {/* Cart Dropdown */}
              {isCartOpen && (
                <div className="absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-xl border z-50">
                  <div className="p-4 border-b">
                    <h3 className="text-lg font-semibold text-gray-900">Shopping Cart</h3>
                  </div>

                  {cart.length === 0 ? (
                    <div className="p-4 text-center text-gray-500">Your cart is empty</div>
                  ) : (
                    <>
                      <div className="max-h-64 overflow-y-auto">
                        {cart.map((item) => (
                          <div key={item.id} className="p-4 border-b flex justify-between items-center">
                            <div className="flex-1">
                              <h4 className="font-medium text-gray-900">{item.name}</h4>
                              <p className="text-sm text-gray-500">${item.price.toFixed(2)} each</p>
                            </div>
                            <div className="flex items-center space-x-2">
                              <button
                                onClick={() => updateQuantity(item.id, item.quantity - 1)}
                                className="w-6 h-6 rounded-full bg-gray-200 flex items-center justify-center text-gray-600 hover:bg-gray-300"
                              >
                                -
                              </button>
                              <span className="w-8 text-center">{item.quantity}</span>
                              <button
                                onClick={() => updateQuantity(item.id, item.quantity + 1)}
                                className="w-6 h-6 rounded-full bg-gray-200 flex items-center justify-center text-gray-600 hover:bg-gray-300"
                              >
                                +
                              </button>
                              <button
                                onClick={() => removeFromCart(item.id)}
                                className="ml-2 text-red-500 hover:text-red-700"
                              >
                                Ã—
                              </button>
                            </div>
                          </div>
                        ))}
                      </div>

                      <div className="p-4 border-t">
                        <div className="flex justify-between items-center mb-4">
                          <span className="font-semibold">Total: ${getTotalPrice().toFixed(2)}</span>
                          <button onClick={clearCart} className="text-sm text-red-500 hover:text-red-700">
                            Clear Cart
                          </button>
                        </div>
                        <button className="w-full bg-amber-600 text-white py-2 rounded-lg font-semibold hover:bg-amber-700 transition-colors">
                          Checkout
                        </button>
                      </div>
                    </>
                  )}
                </div>
              )}
            </div>
          </div>
        </div>
      </nav>

      {/* Hero Section */}
      <section className="pt-24 pb-16 bg-gradient-to-br from-amber-50 to-orange-100">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <h1 className="text-5xl font-bold text-gray-900 mb-6">Our Menu</h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            Handcrafted beverages and fresh pastries made with love
          </p>
        </div>
      </section>

      {/* Menu Content */}
      <section className="py-20 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-12">
            {/* Hot Beverages */}
            <div className="bg-gray-50 rounded-xl p-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-8 text-center">Hot Beverages</h2>
              <div className="space-y-6">
                {[
                  { name: "Espresso", description: "Rich, concentrated coffee shot", price: "$3.50" },
                  { name: "Cappuccino", description: "Espresso with steamed milk and foam", price: "$4.75" },
                  { name: "Latte", description: "Espresso with steamed milk", price: "$5.25" },
                  { name: "Americano", description: "Espresso with hot water", price: "$4.00" },
                  { name: "Mocha", description: "Espresso with chocolate and steamed milk", price: "$5.75" },
                  { name: "Macchiato", description: "Espresso with a dollop of foam", price: "$4.25" },
                ].map((item) => (
                  <div key={item.name} className="flex justify-between items-center group">
                    <div className="flex-1">
                      <h3 className="text-lg font-semibold text-gray-900">{item.name}</h3>
                      <p className="text-gray-600">{item.description}</p>
                    </div>
                    <div className="flex items-center space-x-3">
                      <span className="text-lg font-bold text-amber-600">{item.price}</span>
                      <button
                        onClick={() => addToCart(item.name, item.price, "Hot Beverages")}
                        className="bg-amber-600 text-white p-2 rounded-full hover:bg-amber-700 transition-colors opacity-0 group-hover:opacity-100"
                        title="Add to cart"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M12 6v6m0 0v6m0-6h6m-6 0H6"
                          />
                        </svg>
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Cold Beverages */}
            <div className="bg-gray-50 rounded-xl p-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-8 text-center">Cold Beverages</h2>
              <div className="space-y-6">
                {[
                  { name: "Iced Coffee", description: "Cold brew over ice", price: "$4.25" },
                  { name: "FrappÃ©", description: "Blended iced coffee drink", price: "$5.75" },
                  { name: "Cold Brew", description: "Smooth, less acidic cold extraction", price: "$4.50" },
                  { name: "Iced Latte", description: "Espresso with cold milk over ice", price: "$5.50" },
                  { name: "Nitro Cold Brew", description: "Cold brew infused with nitrogen", price: "$5.25" },
                  { name: "Iced Mocha", description: "Iced espresso with chocolate", price: "$6.00" },
                ].map((item) => (
                  <div key={item.name} className="flex justify-between items-center group">
                    <div className="flex-1">
                      <h3 className="text-lg font-semibold text-gray-900">{item.name}</h3>
                      <p className="text-gray-600">{item.description}</p>
                    </div>
                    <div className="flex items-center space-x-3">
                      <span className="text-lg font-bold text-amber-600">{item.price}</span>
                      <button
                        onClick={() => addToCart(item.name, item.price, "Cold Beverages")}
                        className="bg-amber-600 text-white p-2 rounded-full hover:bg-amber-700 transition-colors opacity-0 group-hover:opacity-100"
                        title="Add to cart"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M12 6v6m0 0v6m0-6h6m-6 0H6"
                          />
                        </svg>
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Pastries & Snacks */}
            <div className="bg-gray-50 rounded-xl p-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-8 text-center">Pastries & Snacks</h2>
              <div className="space-y-6">
                {[
                  { name: "Croissant", description: "Buttery, flaky French pastry", price: "$3.25" },
                  { name: "Blueberry Muffin", description: "Fresh baked with wild blueberries", price: "$3.75" },
                  { name: "Avocado Toast", description: "Multigrain bread with fresh avocado", price: "$7.50" },
                  { name: "Chocolate Chip Cookie", description: "Homemade with premium chocolate", price: "$2.75" },
                  {
                    name: "Bagel with Cream Cheese",
                    description: "Fresh bagel with artisan cream cheese",
                    price: "$4.50",
                  },
                  { name: "Danish Pastry", description: "Flaky pastry with seasonal fruit", price: "$4.25" },
                ].map((item) => (
                  <div key={item.name} className="flex justify-between items-center group">
                    <div className="flex-1">
                      <h3 className="text-lg font-semibold text-gray-900">{item.name}</h3>
                      <p className="text-gray-600">{item.description}</p>
                    </div>
                    <div className="flex items-center space-x-3">
                      <span className="text-lg font-bold text-amber-600">{item.price}</span>
                      <button
                        onClick={() => addToCart(item.name, item.price, "Pastries & Snacks")}
                        className="bg-amber-600 text-white p-2 rounded-full hover:bg-amber-700 transition-colors opacity-0 group-hover:opacity-100"
                        title="Add to cart"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M12 6v6m0 0v6m0-6h6m-6 0H6"
                          />
                        </svg>
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Special Offers */}
      <section className="py-20 bg-amber-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-12">
            <h2 className="text-4xl font-bold text-gray-900 mb-4">Special Offers</h2>
            <p className="text-xl text-gray-600">Limited time deals you don't want to miss</p>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div className="bg-white p-8 rounded-xl shadow-lg">
              <h3 className="text-2xl font-bold text-amber-600 mb-4">Happy Hour</h3>
              <p className="text-gray-700 mb-4">Get 20% off all beverages between 2-4 PM, Monday through Friday.</p>
              <p className="text-sm text-gray-500">Valid until end of month</p>
            </div>
            <div className="bg-white p-8 rounded-xl shadow-lg">
              <h3 className="text-2xl font-bold text-amber-600 mb-4">Coffee & Pastry Combo</h3>
              <p className="text-gray-700 mb-4">Any hot beverage + pastry for just $8.99. Save up to $3!</p>
              <p className="text-sm text-gray-500">Available all day</p>
            </div>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="bg-gray-900 text-white py-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
            <div>
              <h3 className="text-2xl font-bold mb-4">Brew & Bean</h3>
              <p className="text-gray-400">
                Crafting the perfect cup since 1995. Experience the finest coffee beans from around the world.
              </p>
            </div>
            <div>
              <h4 className="text-lg font-semibold mb-4">Quick Links</h4>
              <ul className="space-y-2">
                <li>
                  <Link href="/" className="text-gray-400 hover:text-white transition-colors">
                    Home
                  </Link>
                </li>
                <li>
                  <Link href="/about" className="text-gray-400 hover:text-white transition-colors">
                    About
                  </Link>
                </li>
                <li>
                  <Link href="/products" className="text-gray-400 hover:text-white transition-colors">
                    Products
                  </Link>
                </li>
                <li>
                  <Link href="/menu" className="text-gray-400 hover:text-white transition-colors">
                    Menu
                  </Link>
                </li>
              </ul>
            </div>
            <div>
              <h4 className="text-lg font-semibold mb-4">Contact Info</h4>
              <p className="text-gray-400">
                123 Coffee Street
                <br />
                Downtown District
                <br />
                City, State 12345
              </p>
              <p className="text-gray-400 mt-2">Phone: (555) 123-4567</p>
            </div>
            <div>
              <h4 className="text-lg font-semibold mb-4">Newsletter</h4>
              <p className="text-gray-400 mb-4">Subscribe for coffee tips and special offers</p>
              <form className="flex">
                <input type="email" placeholder="Your email" className="flex-1 px-4 py-2 rounded-l-lg text-gray-900" />
                <button
                  type="submit"
                  className="bg-amber-600 px-4 py-2 rounded-r-lg hover:bg-amber-700 transition-colors"
                >
                  Subscribe
                </button>
              </form>
            </div>
          </div>
          <div className="border-t border-gray-800 mt-12 pt-8 text-center">
            <p className="text-gray-400">&copy; 2024 Brew & Bean. All rights reserved.</p>
          </div>
        </div>
      </footer>
    </div>
  )
}

